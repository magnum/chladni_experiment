{"5b2ad5d000da4e5d8e5d0f82c64c1d32.script": {"body": "var sampleSize = 2048;\nvar sourceNode = null;\nvar audioStream = null;\nvar analyserNode = null;\nvar javascriptNode = null;\nvar amplitudeArray = null;\nvar dbgcount = 0;\n\nvar SAMPLE_RATE = 44100;\nvar MIN_SUPPORTED_FREQ = 60;    \nvar MAX_PEAK_SEARCH = (SAMPLE_RATE/MIN_SUPPORTED_FREQ);\n\nvar noteStrings = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n\nvar setup = function(args, ctx, goo) {\n//\treturn;\n\t\tctx.worldData.buttonClickCount = 0;\n\t\n\tctx.worldData.buttonClickCounter = 0;\n//\t\n\t\tvar audioClass = window.AudioContext || window.webkitAudioContext;\n    ctx.worldData.audioContext = new audioClass();\n\n//ctx.worldData.audioContext=new(window.ctx.worldData.audioContext||window.webkitctx.worldData.audioContext)();\n    \n      navigator.getUserMedia = ( navigator.getUserMedia ||\n                               navigator.webkitGetUserMedia ||\n                               navigator.mozGetUserMedia ||\n                               navigator.msGetUserMedia);\n    \n     navigator.getUserMedia({audio: true},onAudioStream,onAudioStreamError);\n\n\n\n\tfunction onAudioStream(stream) {\n\t\tctx.worldData.localStream = stream;\n\n        sourceNode = ctx.worldData.audioContext.createMediaStreamSource(stream);\n        audioStream = stream;\n \n        analyserNode   = ctx.worldData.audioContext.createAnalyser();\n\t\tanalyserNode.fftSize = sampleSize;\n        javascriptNode = ctx.worldData.audioContext.createScriptProcessor(sampleSize, 1, 1);\n \n\n        amplitudeArray = new Uint8Array(sampleSize);\n \n\n        javascriptNode.onaudioprocess = function () {\n\n            amplitudeArray = new Uint8Array(sampleSize);//analyserNode.frequencyBinCount\n            analyserNode.getByteTimeDomainData(amplitudeArray);\n            var tot = 0;\n            for(var i=0;i<amplitudeArray.length;i++)\n                tot+=amplitudeArray[i]-128;\n            \n            var ac = autoCorrelate( amplitudeArray, ctx.worldData.audioContext.sampleRate );\n\n            \n            if(ac == -1)\n            {\n\n\t\t\t\t\tctx.worldData.chladniM = 0.0;\n\n\t\t\t\t\tctx.worldData.chladniN = 0.0;\n\n            }\n            else\n            {\n\t\t\t\tconsole.log(\"qqsdqsddsq\");\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n                    var pitch = ac;\n                    var pitchRounded = Math.floor( pitch ) ;\n                    var note =  noteFromPitch( pitch );\n                    var noteMod = note%12;    \n                    var noteStr = noteStrings[noteMod];\n                    var detune = centsOffFromPitch( pitch, note );\n                    var remain = (note - noteMod)/12;\n                    \n\t\t\t\t\tctx.worldData.chladniM = noteMod;\n\t\t\t\t\tctx.worldData.chladniN = remain;\n\n\n                  \n\t\t\t\t\n            }\n            \n        };\n \n        sourceNode.connect(analyserNode);\n        analyserNode.connect(javascriptNode);\n        javascriptNode.connect(ctx.worldData.audioContext.destination);\n        \n    }\n\n  function autocorr(data) {\n        var sums = new Array(data.length);\n        var i, j;\n        for (i = 0; i < data.length; i++) {\n            sums[i] = 0;\n            for (j = 0; j < data.length - i; j++) {\n                sums[i] += data[j] * data[j+i];\n            }\n        }\n        return sums;\n    }\n\n    function getPeakPeriodicityIndex(sums,sampleRate) {  \n\n\t\tvar min_supported_freq = 60;\n\t\tvar max_peak_search = (sampleRate/min_supported_freq);\n\t\t\n\t\tfor (i = 0; sums[i] >= 0 && i < sums.length; i++) {}\n\t\tfor (i = i; sums[i] < 0 && i < sums.length; i++) {}\n\t\t//return i;\n\t\tvar m = sums[i], maxIndex = i;\n\t\t\n\t\tfor (i = i; i < max_peak_search; i++) \n\t\t{\n\t\t\tif (sums[i] > m) \n\t\t\t{\n\t\t\t\tm = sums[i];\n\t\t\t\tmaxIndex = i;\n\t\t\t}\n\t\t}\n\t\t\n        return maxIndex;\n    }\n    \n\n    function computeFreqFromAutocorr(timeData,sampleRate) {\n        var sums = autocorr(timeData);\n        var maxIndex = getPeakPeriodicityIndex(sums,sampleRate);\n        return Math.round(sampleRate / maxIndex);\n    }   \n    \n    \n    \n \nfunction onAudioStreamError(e) {\n    alert(e);\n}\n\n\n\nfunction noteFromPitch( frequency ) {\n\tvar noteNum = 12 * (Math.log( frequency / 440 )/Math.log(2) );\n\treturn Math.round( noteNum ) + 69;\n}\n\nfunction frequencyFromNoteNumber( note ) {\n\treturn 440 * Math.pow(2,(note-69)/12);\n}\n\nfunction centsOffFromPitch( frequency, note ) {\n\treturn Math.floor( 1200 * Math.log( frequency / frequencyFromNoteNumber( note ))/Math.log(2) );\n}\n\n\n\nfunction autoCorrelate( buf, sampleRate ) {\n\tvar MIN_SAMPLES = 4;\t// corresponds to an 11kHz signal\n\tvar MAX_SAMPLES = 1000; // corresponds to a 44Hz signal\n\tvar SIZE = 1000;\n\tvar best_offset = -1;\n\tvar best_correlation = 0;\n\tvar rms = 0;\n\tvar foundGoodCorrelation = false;\n\tvar i=0;\n\t\n\tif (buf.length < (SIZE + MAX_SAMPLES - MIN_SAMPLES))\n            {\n                //document.getElementById(\"frequencydlg\").innerHTML=\"Not enough data\";   \n                return -1;  // Not enough data\n            }\n\t\t\n\n\tfor (i=0;i<SIZE;i++) {\n\t\tvar val = (buf[i] - 128)/128;\n\t\trms += val*val;\n\t}\n\trms = Math.sqrt(rms/SIZE);\n\tif (rms<0.01)\n            {\n                //document.getElementById(\"frequencydlg\").innerHTML=\"No Sound\";   \n                return -1;  // No Sound\n            }\n    //document.getElementById(\"frequencydlg\").innerHTML=rms;\n\tvar lastCorrelation=1;\n\tfor (var offset = MIN_SAMPLES; offset <= MAX_SAMPLES; offset++) {\n\t\tvar correlation = 0;\n\n\t\tfor (i=0; i<SIZE; i++) {\n\t\t\tcorrelation += Math.abs(((buf[i] - 128)/128)-((buf[i+offset] - 128)/128));\n\t\t}\n\t\tcorrelation = 1 - (correlation/SIZE);\n\t\tif ((correlation>0.9) && (correlation > lastCorrelation))\n\t\t\tfoundGoodCorrelation = true;\n\t\telse if (foundGoodCorrelation) {\n\t\t\t// short-circuit - we found a good correlation, then a bad one, so we'd just be seeing copies from here.\n\t\t\treturn sampleRate/best_offset;\n\t\t}\n\t\tlastCorrelation = correlation;\n\t\tif (correlation > best_correlation) {\n\t\t\tbest_correlation = correlation;\n\t\t\tbest_offset = offset;\n\t\t}\n\t}\n\tif (best_correlation > 0.01) {\n\t\t// console.log(\"f = \" + sampleRate/best_offset + \"Hz (rms: \" + rms + \" confidence: \" + best_correlation + \")\")\n\t\treturn sampleRate/best_offset;\n\t}\n\treturn -1;\n//\tvar best_frequency = sampleRate/best_offset;\n}    \n    \n};\n\n\n\n\n\n    \n  \n\n\n\n\n\nvar cleanup = function(args, ctx, goo) {\n\t//\tvar freq = ctx.worldData.microphone.getFreq(1);\n//\tconsole.log(freq);\n        analyserNode.disconnect(javascriptNode);\n        javascriptNode.disconnect(ctx.worldData.audioContext.destination);\n        sourceNode.disconnect();\n        if(ctx.worldData.localStream!==undefined)\n        if(ctx.worldData.localStream!==null)\n        {\n\t\t//\tconsole.log(ctx.worldData.localStream);\n\t\t\tctx.worldData.localStream.ended = true;\n\t\t\t//ctx.worldData.localStream.removeTrack();\n\t\t\t//ctx.worldData.localStream.pause();\n\t\t\tctx.worldData.localStream.stop();\n\t\t\tctx.worldData.localStream = null;\n\t\t\t\tdelete ctx.worldData.localStream;\n        }\n        \n        \n        if(ctx.worldData.audioContext!==undefined)\n\t\t\tif(ctx.worldData.audioContext!==null)\n\t\t\t{\n\t\t\t\tctx.worldData.audioContext = null;\n\t\t\t\tdelete ctx.worldData.audioContext;\n\t\t\t}\n        \n};\n\n\nvar update = function(args, ctx, goo) {\n\n};\n\n\n\n\n", "name": "TestMic script", "license": "CC0", "created": "2014-11-07T15:45:30.643349+00:00", "deleted": false, "dataModelVersion": 2, "modified": "2014-11-13T13:36:18.246595+00:00", "dependencies": {}, "id": "5b2ad5d000da4e5d8e5d0f82c64c1d32.script"}, "15adc08dc8cb4d599b8cdb547331c1c6.entity": {"name": "Orbit Cam", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-09-29T20:29:18.806Z", "dataModelVersion": 2, "modified": "2015-09-29T20:29:18.806Z", "static": false, "components": {"camera": {"fov": 45, "lockedRatio": false, "far": 1000, "followEditorCam": true, "projectionMode": "Perspective", "near": 1, "aspect": 1, "size": 100}, "transform": {"rotation": [-33.518019540435354, -202.43621588025343, 0], "scale": [1, 1, 1], "translation": [9.875117301940918, 19.395248413085938, -24.966947555541992]}, "script": {"scripts": {"0f60f0671b7040b6ab830c9f0667f575.scriptInstance": {"options": {"maxAscent": 89, "whenUsed": true, "orbitSpeed": 0.005, "clampAzimuth": false, "maxAzimuth": 270, "minZoomDistance": 1, "enabled": true, "minAzimuth": 90, "minAscent": 6, "lookAtDistance": 33.1134033203125, "drag": 0.9, "dragButton": "Left", "panButton": "Right", "zoomSpeed": 1, "smoothness": 0.4, "maxZoomDistance": 1000}, "scriptRef": "GOO_ENGINE_SCRIPTS/OrbitNPanControlScript", "sortValue": 0, "name": "OrbitNPan"}}}}, "hidden": false, "id": "15adc08dc8cb4d599b8cdb547331c1c6.entity"}, "4c73b8da7a1b4428b0e7875e192a8114.texture": {"wrapS": "EdgeClamp", "minFilter": "Trilinear", "name": "Texture", "license": "CC0", "flipY": true, "deleted": false, "magFilter": "Bilinear", "created": "2014-11-07T15:45:33.558810+00:00", "dataModelVersion": 2, "modified": "2014-11-19T09:08:34.423831+00:00", "svgData": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1023\" height=\"1023\">\n  <svg viewBox=\"0 0 1 1\" height=\"100%\" width=\"100%\">\n\t\t<rect\n x=\"0\" y=\"0\" width=\"100%\" height=\"100%\"\n\n fill=\"white\"/>\n\t</svg>\n</svg>", "repeat": [1, 1], "anisotropy": 1, "offset": [0, 0], "generateMipmaps": true, "id": "4c73b8da7a1b4428b0e7875e192a8114.texture", "wrapT": "EdgeClamp"}, "975394ad48e3466b904852842e74114e.entity": {"name": "Cylinder", "license": "CC0", "tags": {}, "deleted": false, "created": "2014-11-07T15:45:31.539338+00:00", "dataModelVersion": 2, "modified": "2014-11-19T11:07:01.557579+00:00", "static": false, "components": {"transform": {"rotation": [-90.00000250447816, 179.999991348578, -3.5083548023555002e-15], "scale": [1, 1, 5], "translation": [1.637214906561376e-14, -2.7072436809539795, -1.0840282982371718e-07], "children": {}}, "meshRenderer": {"receiveShadows": true, "materials": {"3353913b5303456893dd16c10d7af32a.material": {"materialRef": "3353913b5303456893dd16c10d7af32a.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "meshData": {"shape": "Cylinder", "shapeOptions": {"radius": 1, "radialSamples": 16}}}, "hidden": false, "id": "975394ad48e3466b904852842e74114e.entity"}, "55bfcc6936e5481b924d90effef75e58.posteffects": {"name": "Post effects", "license": "CC0", "created": "2014-11-07T15:45:32.239601+00:00", "deleted": false, "modified": "2014-11-12T14:27:53.663924+00:00", "dataModelVersion": 2, "posteffects": {"92b94a15f2d7417c8850d9320ee99218.posteffect": {"name": "Noise", "enabled": false, "sortValue": 1, "id": "92b94a15f2d7417c8850d9320ee99218.posteffect", "type": "Noise", "options": {"nIntensity": 7}}}, "id": "55bfcc6936e5481b924d90effef75e58.posteffects"}, "8444d9d3cf2b4780a68cabcea7523891.script": {"body": "//Setup\nvar setup = function(args, ctx, goo) {\n//\n\ttry\n\t{\n\n\t\t//Globals\n\t\tctx.worldData.preRenderProcessCount = 0;\n\t\tctx.worldData.preRenderRandom = 0;\n\n\t\tsetupChladniObjects(args, ctx, goo);\n\t\tsetupParticulesObjects(args, ctx, goo);\n\n//\t\tvar preRenderChladniEntity = ctx.world.by.name(\"PreRenderChladniEntity\").first();\n//\t\tconsole.log(preRenderChladniEntity);\n\t\n\n\t\tvar preRenderChladniEntity = ctx.world.by.name(\"PreRenderChladniQuadEntity\").first();\n\t\tpreRenderChladniEntity.meshRendererComponent.materials[0] = new goo.Material('TexturedMaterial', {\n\t\t\t\tdefines: {\n\t\t\t\t\tTEXCOORD0: true,\n\t\t\t\t\tDIFFUSE_MAP: true\n\t\t\t\t},\n\t\t\t\tattributes : {\n\t\t\t\t\tvertexPosition : goo.MeshData.POSITION,\n\t\t\t\t\tvertexUV0 : goo.MeshData.TEXCOORD0\n\t\t\t\t},\n\t\t\t\tuniforms : {\n\t\t\t\t\tviewProjectionMatrix : goo.Shader.VIEW_PROJECTION_MATRIX,\n\t\t\t\t\tworldMatrix : goo.Shader.WORLD_MATRIX,\n\t\t\t\t\tdiffuseMap : goo.Shader.DIFFUSE_MAP\n\t\t\t\t},\n\t\t\t\tvshader : [\n\t\t\t\t\t'attribute vec3 vertexPosition;',\n\t\t\t\t\t'attribute vec2 vertexUV0;',\n\n\t\t\t\t\t'uniform mat4 viewProjectionMatrix;',\n\t\t\t\t\t'uniform mat4 worldMatrix;',\n\n\t\t\t\t\t'varying vec2 texCoord0;',\n\n\t\t\t\t\t'void main(void) {',\n\t\t\t\t\t\t'texCoord0 = vertexUV0;',\n\t\t\t\t\t\t'gl_Position = viewProjectionMatrix * worldMatrix * vec4(vertexPosition, 1.0);',\n\t\t\t\t\t'}'\n\t\t\t\t].join('\\n'),\n\t\t\t\tfshader : [\n\t\t\t\t\t'uniform sampler2D diffuseMap;',\n\t\t\t\t\t'varying vec2 texCoord0;',\n\t\t\t\t\t'void main(void)',\n\t\t\t\t\t'{',\n\t\t\t\t\t\t'gl_FragColor = texture2D(diffuseMap, texCoord0);',\n\t\t\t\t\t'}'\n\t\t\t\t].join('\\n')\n\t\t\t});\n\t\tpreRenderChladniEntity.meshRendererComponent.materials[0].setTexture('DIFFUSE_MAP', ctx.worldData.chladniTarget);// = ctx.worldData.chladniMaterial;\n\n\n\t\tctx.worldData.preRender = function(tpf){\n\t\t\ttry {\n\t\t\t\n\t\t\t\t\tctx.worldData.preRenderProcessCount++;\n\t\t\t\t\tctx.worldData.preRenderRandom = Math.random();\n\n\t\t\t\t\tctx.worldData.renderableObject.materials[0] = ctx.worldData.chladniMaterial;\n\t\t\t\t\tctx.worldData.chladniMaterial.setTexture('DIFFUSE_MAP', ctx.worldData.chladniTexture);\n\t\t\t\t\tctx.world.gooRunner.renderer.render(ctx.worldData.renderableObject, goo.FullscreenUtil.camera, [], ctx.worldData.chladniTarget, true);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tctx.worldData.renderableObject.materials[0] = ctx.worldData.ParticlesPositionsMaterial;\n\t\t\t\t\tctx.worldData.ParticlesPositionsMaterial.setTexture('DIFFUSE_MAP', ctx.worldData.particlesPositionsRenderTargetSrc);\n\t\t\t\t\tctx.worldData.ParticlesPositionsMaterial.setTexture('CHLADNI_MAP', ctx.worldData.chladniTarget);\n\t\t\t\t\tctx.world.gooRunner.renderer.render(ctx.worldData.renderableObject, goo.FullscreenUtil.camera, [], ctx.worldData.particlesPositionsRenderTargetDst, true);\n\n\t\t\t\t\t//ctx.worldData.particlesEntity.meshRendererComponent.materials[0].setTexture('DIFFUSE_MAP', ctx.worldData.particulesColorsTexture);\n\t\t\t\n\t\t\t\t\tctx.worldData.particlesVertexMaterial.setTexture('DIFFUSE_MAP', ctx.worldData.particulesColorsTexture);\n\t\t\t\t\t//ctx.worldData.particulesColorsTexture.setNeedsUpdate();\n\t\t\t\t\tctx.worldData.particlesEntity.meshRendererComponent.materials[0].setTexture('POS_MAP', ctx.worldData.particlesPositionsRenderTargetDst);\n\n\t\t\t\t\tvar swap = ctx.worldData.particlesPositionsRenderTargetDst;\n\t\t\t\t\tctx.worldData.particlesPositionsRenderTargetDst = ctx.worldData.particlesPositionsRenderTargetSrc;\n\t\t\t\t\tctx.worldData.particlesPositionsRenderTargetSrc = swap;\n\n\t\t\t\t\t//ctx.worldData.chladniTargetCurrent\n\n\t\t\t\t}\n\t\t\tcatch(err) {\n\t\t\tconsole.log(\"Init-preRender : \" + err);\n\t\t\t}\n\t\t};\n\n\t\tctx.world.gooRunner.callbacksPreRender.push(ctx.worldData.preRender);\n\n\t\t//console.log(preRenderChladniEntity.meshRendererComponent);\n\n\t\t//console.log(ctx.world.gooRunner.renderer.pass);\n\t\t//console.log(goo.FullscreenUtil.camera);\n\n\t\t\n\t}\n\tcatch(err)\n\t{\n\t\tconsole.log(\"Init-setup : \" + err);\n\t}\n\n};\n\n\n\n\n//Particles Setup \n{\n\nvar setupParticulesObjects = function(args, ctx, goo) {\n\ttry\n\t{\n\t\tvar x=0.0,y=0.0,z=0.0,i=0;\n\t\t\n\t\tvar textureSettings = {\n\t\t\ttype: 'Float',\n\t\t\tminFilter: 'NearestNeighborNoMipMaps',\n\t\t\tmagFilter: 'NearestNeighbor',\n\t\t};\n\t\t\n\t\tctx.worldData.particlesSize = 1;\n\t\t\n\t\t//Entity\n\t\t{\n\n\t\tvar attributeMap = goo.MeshData.defaultMap([goo.MeshData.POSITION, goo.MeshData.TEXCOORD0]);\n\t\tvar meshData = new goo.MeshData(attributeMap, ctx.worldData.chladniDim*ctx.worldData.chladniDim);\n\t\tmeshData.indexModes = ['Points'];\n\n\t\tvar verts = meshData.getAttributeBuffer(goo.MeshData.POSITION);\n\t\tvar uvs = meshData.getAttributeBuffer(goo.MeshData.TEXCOORD0);\n\n\t\tfor ( x = 0; x < ctx.worldData.chladniDim; x++) {\n\t\t\tfor ( y = 0; y < ctx.worldData.chladniDim; y++) \n\t\t\t{\n\t\t\t\ti = y * ctx.worldData.chladniDim + x;\n\n\t\t\t\tverts[i * 3 + 0] = Math.random()*x;\n\t\t\t\tverts[i * 3 + 1] = Math.random()*y;\n\t\t\t\tverts[i * 3 + 2] = 0.0;\n\n\t\t\t\tuvs[i * 2 + 0] = x / ctx.worldData.chladniDim;\n\t\t\t\tuvs[i * 2 + 1] = y / ctx.worldData.chladniDim;\n\t\t\t}\n\t\t}\n\n\t\tctx.worldData.particlesVertexMaterial = new goo.Material('ParticlesVertexMaterial', {\n\t\t\t\tattributes: {\n\t\t\t\t\tvertexUV0: goo.MeshData.TEXCOORD0\n\t\t\t\t},\n\t\t\t\tuniforms: {\n\t\t\t\t\tviewProjectionMatrix: goo.Shader.VIEW_PROJECTION_MATRIX,\n\t\t\t\t\tworldMatrix: goo.Shader.WORLD_MATRIX,\n\t\t\t\t\tdiffuseMap: goo.Shader.DIFFUSE_MAP,\n\t\t\t\t\tposMap: 'POS_MAP',\n\t\t\t\t\tpointSize: function() {return ctx.worldData.particlesSize;},\n\t\t\t\t},\n\t\t\t\tvshader: [\n\t\t\t\t\t'attribute vec2 vertexUV0;',\n\n\t\t\t\t\t'varying vec2 texCoord0;',\n\n\t\t\t\t\t'uniform sampler2D diffuseMap;',\n\t\t\t\t\t'uniform sampler2D posMap;',\n\n\t\t\t\t\t'uniform mat4 viewProjectionMatrix;',\n\t\t\t\t\t'uniform mat4 worldMatrix;',\n\t\t\t\t\t'uniform float pointSize;',\n\n\t\t\t\t\t'void main(void) {',\n\t\t\t\t\t'   texCoord0 = vertexUV0;',\n\t\t\t\t\t'   vec4 vertexPosition = texture2D(posMap, vertexUV0);',\n\t\t\t\t\t'   gl_Position = viewProjectionMatrix * worldMatrix * vec4(vertexPosition.xyz, 1.0);',\n\t\t\t\t\t//'   gl_PointSize = pointSize;',\n\t\t\t\t\t'   gl_PointSize = vertexPosition.w;',\n\t\t\t\t\t'}'\n\t\t\t\t].join('\\n'),\n\t\t\t\tfshader : goo.ShaderLib.copy.fshader,\n\t\t\t\t/*\n\t\t\t\tfshader: [\n\t\t\t\t\t'varying vec2 texCoord0;',\n\t\t\t\t\t'uniform sampler2D diffuseMap;',\n\t\t\t\t\t'void main(void){',\n\t\t\t\t\t'   vec4 vertexPosition = texture2D(diffuseMap, texCoord0);',\n\t\t\t\t\t'float pixcol = 1.0-(vertexPosition.w-1.0);',\n\t\t\t\t\t'\tvec4 color = vec4(pixcol, pixcol, pixcol, 1.0);',\n\t\t\t\t\t'   gl_FragColor = color;',\n\t\t\t\t\t'}'\n\t\t\t\t].join('\\n')*/\n\t\t\t});\n\t\t\t/*\n\t\tctx.worldData.particlesVertexMaterial = new goo.Material('ParticlesVertexMaterial', {\n\t\t\t\tattributes: {\n\t\t\t\t\tvertexUV0: goo.MeshData.TEXCOORD0\n\t\t\t\t},\n\t\t\t\tuniforms: {\n\t\t\t\t\tviewProjectionMatrix: goo.Shader.VIEW_PROJECTION_MATRIX,\n\t\t\t\t\tworldMatrix: goo.Shader.WORLD_MATRIX,\n\t\t\t\t\tdiffuseMap: goo.Shader.DIFFUSE_MAP,\n\t\t\t\t\tposMap: 'POS_MAP',\n\t\t\t\t\tpointSize: function() {return ctx.worldData.particlesSize;},\n\t\t\t\t},\n\t\t\t\tvshader: goo.ShaderLib.copy.vshader,\n\t\t\t\tfshader : goo.ShaderLib.copy.fshader,\n\t\t\t});*/\n\t\tctx.worldData.particlesEntity = ctx.world.createEntity(goo.world, meshData, ctx.worldData.particlesVertexMaterial);//.addToWorld();\n\n\t\t//Particles colors\n\t\t{\n\t\tvar particulesColors = new Float32Array(4 * ctx.worldData.chladniDim * ctx.worldData.chladniDim);\n\n\t\t//var vec = new goo.Vector3();\n\t\tfor ( x = 0; x < ctx.worldData.chladniDim; x++) \n\t\t{\n\t\tfor ( z = 0; z < ctx.worldData.chladniDim; z++) \n\t\t\t{\n\t\t\t\ti = z * ctx.worldData.chladniDim + x;\n\t\t\t\t\n\t\t\t\tvar val = .5+(Math.random()/2);\n\n\t\t\t\tparticulesColors[i * 4 + 0] = val;\n\t\t\t\tparticulesColors[i * 4 + 1] = val;\n\t\t\t\tparticulesColors[i * 4 + 2] = val;\n\t\t\t\tparticulesColors[i * 4 + 3] = val;\n\t\t\t}\n\t\t}\n\t\n\t\t\tctx.worldData.particulesColorsTexture = new goo.Texture(particulesColors, textureSettings, ctx.worldData.chladniDim, ctx.worldData.chladniDim);\n\t\t\tctx.worldData.particulesColorsTexture.generateMipmaps = false;\n\t\t\tctx.worldData.particulesColorsTexture.setNeedsUpdate();\n\t\t//\tctx.worldData.particlesVertexMaterial.setTexture('DIFFUSE_MAP', ctx.worldData.particulesColorsTexture);\n\t\t\t\t\t//ctx.worldData.particlesEntity.meshRendererComponent.materials[0].setTexture('DIFFUSE_MAP', ctx.worldData.particulesColorsTexture);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\n\t\t}\n\n\n\n\t\t//Entity position/Scale\n\t\t{\t\t\n\t\tvar plateSize = 20;\n\t\tctx.worldData.particlesEntity.transformComponent.transform.scale.x = plateSize;\n\t\tctx.worldData.particlesEntity.transformComponent.transform.scale.y = 1;\n\t\tctx.worldData.particlesEntity.transformComponent.transform.scale.z = plateSize;\n\n\t\tctx.worldData.particlesEntity.transformComponent.transform.translation.x = -plateSize/2;\n\t\tctx.worldData.particlesEntity.transformComponent.transform.translation.y = 0;\n\t\tctx.worldData.particlesEntity.transformComponent.transform.translation.z = -plateSize/2;\n\t\t}\n\n\t\tctx.worldData.particlesEntity.transformComponent.setUpdated();\n\t\t\n\t\t\n\t\tctx.worldData.particlesEntity.addToWorld();\n\n\n\n\t\t}\n\n\t\t//Positions\n\t\t{\n\t\t\t\n\n\n\n\t\tctx.worldData.particlesPositionsRenderTargetSrc = new goo.RenderTarget(ctx.worldData.chladniDim, ctx.worldData.chladniDim, textureSettings);\n\t\tctx.worldData.particlesPositionsRenderTargetDst = new goo.RenderTarget(ctx.worldData.chladniDim, ctx.worldData.chladniDim, textureSettings);\n\t\t\n\t\tvar positionRawImg = new Float32Array(4 * ctx.worldData.chladniDim * ctx.worldData.chladniDim);\n\n\t\t//var vec = new goo.Vector3();\n\t\tfor ( x = 0; x < ctx.worldData.chladniDim; x++) \n\t\t{\n\t\tfor ( z = 0; z < ctx.worldData.chladniDim; z++) \n\t\t\t{\n\t\t\t\ti = z * ctx.worldData.chladniDim + x;\n\t\t\t\t/*\n\t\t\t\tpositionRawImg[i * 4 + 0] = (x / ctx.worldData.chladniDim)+(Math.random()/1000);\n\t\t\t\tpositionRawImg[i * 4 + 1] = 0.0;\n\t\t\t\tpositionRawImg[i * 4 + 2] = (z / ctx.worldData.chladniDim)+(Math.random()/1000);\n\t\t\t\tpositionRawImg[i * 4 + 3] = 1.0;\n\t\t\t\t*/\n\t\t\t\tpositionRawImg[i * 4 + 0] = Math.random();\n\t\t\t\tpositionRawImg[i * 4 + 1] = 0.0;\n\t\t\t\tpositionRawImg[i * 4 + 2] = Math.random();\n\t\t\t\tpositionRawImg[i * 4 + 3] = 1.0+(0.5*Math.random());\n\t\t\t}\n\t\t}\n\t\n\t\tctx.worldData.particlesPositionsTexture = new goo.Texture(positionRawImg, textureSettings, ctx.worldData.chladniDim, ctx.worldData.chladniDim);\n\t\tctx.worldData.particlesPositionsTexture.generateMipmaps = false;\n\t\tctx.worldData.particlesPositionsTexture.setNeedsUpdate();\n\t\t\n\t//\tctx.worldData.particlesEntity.meshRendererComponent.materials[0].setTexture('DIFFUSE_MAP', ctx.worldData.particlesPositionsTexture);\n\t\tctx.worldData.ParticlesPositionsMaterial =\tnew goo.Material('ParticlesPositionsMaterial',{\n\t\t\t\tdefines: {\n\t\t\t\t\tTEXCOORD0: true,\n\t\t\t\t\tDIFFUSE_MAP: true\n\t\t\t\t},\n\t\t\t\tattributes : {\n\t\t\t\t\tvertexPosition : goo.MeshData.POSITION,\n\t\t\t\t\tvertexUV0 : goo.MeshData.TEXCOORD0\n\t\t\t\t},\n\t\t\t\tuniforms : {\n\t\t\t\t\tviewProjectionMatrix : goo.Shader.VIEW_PROJECTION_MATRIX,\n\t\t\t\t\tworldMatrix : goo.Shader.WORLD_MATRIX,\n\t\t\t\t\tdiffuseMap : goo.Shader.DIFFUSE_MAP,\n\t\t\t\t\tchladniMap : 'CHLADNI_MAP',\n\t\t\t\t\trndIn: function() {return ctx.worldData.preRenderRandom;},\n\t\t\t\t\tdimension: function() {return ctx.worldData.chladniDim;}\n\n\t\t\t\t},\n\t\t\t\tvshader : [\n\t\t\t\t\t'attribute vec3 vertexPosition;',\n\t\t\t\t\t'attribute vec2 vertexUV0;',\n\n\t\t\t\t\t'uniform mat4 viewProjectionMatrix;',\n\t\t\t\t\t'uniform mat4 worldMatrix;',\n\n\t\t\t\t\t'varying vec2 texCoord0;',\n\n\t\t\t\t\t'void main(void) {',\n\t\t\t\t\t\t'texCoord0 = vertexUV0;',\n\t\t\t\t\t\t'gl_Position = viewProjectionMatrix * worldMatrix * vec4(vertexPosition, 1.0);',\n\t\t\t\t\t'}'\n\t\t\t\t].join('\\n'),\n\t\t\t\tfshader : [\n\t\t\t\t\t'precision highp float;',\n\t\t\t\t\t'uniform sampler2D diffuseMap;',\n\t\t\t\t\t'uniform sampler2D chladniMap;',\n\t\t\t\t\t'uniform float rndIn;',\n\t\t\t\t\t'uniform float dimension;',\n\t\t\t\t\t'varying vec2 texCoord0;',\n\t\t\t\t\t'#define PI 3.1415926535897932384626433832795',\n\t\t\t\t\t'#define HALFPI 1.5707963267948966192313216916398',\n\t\t\t\t\t'void main(void)',\n\t\t\t\t\t'{',\n\t\t\t\t\t\t\n\t\t\t\t\t\t'vec4 prevPos = texture2D(diffuseMap, texCoord0);',\n\n\t\t\t\t\t\t'float rnd1_01 = fract(sin(dot(texCoord0.xy ,vec2(13.54645,rndIn*100.0))) * 43758.5453);',\n\t\t\t\t\t\t'float rnd2_01 = fract(sin(dot(texCoord0.xy ,vec2(rndIn*100.0,13.54645))) * 43758.5453);',\n\t\t\t\t\t\t'float rnd3_01 = fract(sin(dot(texCoord0.xy ,vec2(13.54645,rndIn*100.0))) * 43758.5453);',\n\n\t\t\t\t\t\t'float rnd1_012 = floor(rnd1_01*3.0)-1.0;',\n\t\t\t\t\t\t'float rnd2_012 = floor(rnd2_01*3.0)-1.0;',\n\n\n\t\t\t\t\t\t'vec2 chladniRndDisplacement = vec2(prevPos.x+(rnd1_012/dimension)/2.0,prevPos.z+(rnd2_012/dimension)/2.0);',\n\n\t\t\t\t\t\t'float chladniPrev = texture2D(chladniMap, prevPos.xz).y;',\n\t\t\t\t\t\t'float chladniNext = texture2D(chladniMap, chladniRndDisplacement.xy).y;',\n\n\t\t\t\t\t\t'if(chladniPrev < 0.02)',\n\t\t\t\t\t\t\t'chladniPrev=rnd1_01/10.0;',\n\t\t\t\t\t\t'if(chladniNext < 0.02)',\n\t\t\t\t\t\t\t'chladniNext=rnd1_01/10.0;',\n\n\n\t\t\t\t\t\t'if(chladniNext+.001 < chladniPrev)',\n\t\t\t\t\t\t'{',\n\t\t\t\t\t\t'prevPos.x=chladniRndDisplacement.x;',\n\t\t\t\t\t\t'prevPos.z=chladniRndDisplacement.y;',\n\t\t\t\t\t\t'}',\t\n\n\n\n\t\t\t\t\t\t'prevPos.x+=(.5*(rnd1_01-.5)/dimension);',\n\t\t\t\t\t\t'prevPos.z+=(.5*(rnd2_01-.5)/dimension);',//*chladniNext\n\n\n\n\t\t\t\t\t\t'if(chladniPrev > 0.9)',\n\t\t\t\t\t\t'{',\n\t\t\t\t\t\t'prevPos.x+=((rnd1_01-.5)/dimension)*3.0;',\n\t\t\t\t\t\t'prevPos.z+=((rnd2_01-.5)/dimension)*3.0;',\n\t\t\t\t\t\t'}',\t\n\n\n\t\t\t\t\t\t'prevPos.y=((rnd1_01*rnd2_01)*chladniPrev/5.0);',\n\n\t\t\t\t\t\t//'float rnd_012 = 0.0;',\n\t\t\t\t\t\t//'float rnd1_02 = 1.0',\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t//'pos.y = rnd_012;',\n\t\t\t\t\t\t\n\t\t\t\t\t\t//'pos.y = chladni.y;',\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t//'pos.y = yrnd*1.0;',\n\t\t\t\t\t\t//'vec4 chladniRGB = texture2D(chladniMap, pos.xz);',\n\t\t\t\t\t\t//'float chladniY = chladniRGB.x;',\n\t\t\t\t\t\t//'float chladniY = texture2D(chladniMap, pos.xz).x;',\n\t\t\t\t\t\t//'pos.y = yrnd*chladniY;',\n/*\n\t\t\t\t\t\t'if(prevPos.x < 0.0)',\n\t\t\t\t\t\t'prevPos.x = rnd1_01;',\n\t\t\t\t\t\t'if(prevPos.x > 1.0)',\n\t\t\t\t\t\t'prevPos.x = rnd1_01;',\n\n\t\t\t\t\t\t'if(prevPos.z < 0.0)',\n\t\t\t\t\t\t'prevPos.z = rnd2_01;',\n\t\t\t\t\t\t'if(prevPos.z > 1.0)',\n\t\t\t\t\t\t'prevPos.z = rnd2_01;',\n*/\n\t\t\t\t\t\t'if(prevPos.x < 0.0)',\n\t\t\t\t\t\t'prevPos.x = rnd1_01;',\n\t\t\t\t\t\t'if(prevPos.x > 1.0)',\n\t\t\t\t\t\t'prevPos.x = rnd1_01;',\n\n\t\t\t\t\t\t'if(prevPos.z < 0.0)',\n\t\t\t\t\t\t'prevPos.z = rnd2_01;',\n\t\t\t\t\t\t'if(prevPos.z > 1.0)',\n\t\t\t\t\t\t'prevPos.z = rnd2_01;',\n\n\t\t\t\t\t\t'gl_FragColor = prevPos;',\n\t\t\t\t\t'}'\n\t\t\t\t].join('\\n')\n\t\t\t});\n\t\t\n\t\t//Copy in position Targets\t\t\t\n\n\t\tctx.worldData.renderableObject.materials[0] = new goo.Material('TexturedMaterialCopyPositions', {\n\t\t\t\tdefines: {\n\t\t\t\t\tTEXCOORD0: true,\n\t\t\t\t\tDIFFUSE_MAP: true\n\t\t\t\t},\n\t\t\t\tattributes : {\n\t\t\t\t\tvertexPosition : goo.MeshData.POSITION,\n\t\t\t\t\tvertexUV0 : goo.MeshData.TEXCOORD0\n\t\t\t\t},\n\t\t\t\tuniforms : {\n\t\t\t\t\tviewProjectionMatrix : goo.Shader.VIEW_PROJECTION_MATRIX,\n\t\t\t\t\tworldMatrix : goo.Shader.WORLD_MATRIX,\n\t\t\t\t\tdiffuseMap : goo.Shader.DIFFUSE_MAP\n\t\t\t\t},\n\t\t\t\tvshader : [\n\t\t\t\t\t'attribute vec3 vertexPosition;',\n\t\t\t\t\t'attribute vec2 vertexUV0;',\n\n\t\t\t\t\t'uniform mat4 viewProjectionMatrix;',\n\t\t\t\t\t'uniform mat4 worldMatrix;',\n\n\t\t\t\t\t'varying vec2 texCoord0;',\n\n\t\t\t\t\t'void main(void) {',\n\t\t\t\t\t\t'texCoord0 = vertexUV0;',\n\t\t\t\t\t\t'gl_Position = viewProjectionMatrix * worldMatrix * vec4(vertexPosition, 1.0);',\n\t\t\t\t\t'}'\n\t\t\t\t].join('\\n'),\n\t\t\t\tfshader : [\n\t\t\t\t\t'uniform sampler2D diffuseMap;',\n\t\t\t\t\t'varying vec2 texCoord0;',\n\t\t\t\t\t'void main(void)',\n\t\t\t\t\t'{',\n\t\t\t\t\t\t'gl_FragColor = texture2D(diffuseMap, texCoord0);',\n\t\t\t\t\t'}'\n\t\t\t\t].join('\\n')\n\t\t\t});\n\t\tctx.worldData.renderableObject.materials[0].setTexture('DIFFUSE_MAP', ctx.worldData.particlesPositionsTexture);\n\t\tctx.world.gooRunner.renderer.render(ctx.worldData.renderableObject, goo.FullscreenUtil.camera, [], ctx.worldData.particlesPositionsRenderTargetSrc, true);\n\t\tctx.world.gooRunner.renderer.render(ctx.worldData.renderableObject, goo.FullscreenUtil.camera, [], ctx.worldData.particlesPositionsRenderTargetDst, true);\n\n\t//\tctx.worldData.particlesEntity.meshRendererComponent.materials[0].setTexture('DIFFUSE_MAP', ctx.worldData.particlesPositionsRenderTargetDst);\n\n\t\tctx.worldData.particlesEntity.meshRendererComponent.materials[0].setTexture('POS_MAP', ctx.worldData.particlesPositionsRenderTargetSrc);\n\n\t\t\n\t\t\n\t\t}\n\n\n\n\t\t\n\n\t}\n\tcatch(err)\n\t{\n\t\tconsole.log(\"Init-setupParticulesObjects : \" + err);\n\t}\n};\n\nvar cleanupParticulesObjects = function(ctx) {\n\ttry\n\t{\n\t\tif(ctx.worldData.particlesEntity!==undefined) \n\t\t{\n\t\t\tctx.worldData.particlesEntity.removeFromWorld();\n\t\t\tdelete ctx.worldData.particlesEntity;\n\t\t}\n\n\t\tif(ctx.worldData.ParticlesPositionsMaterial!==undefined) delete ctx.worldData.ParticlesPositionsMaterial;\n\t\tif(ctx.worldData.particlesPositionsRenderTargetSrc!==undefined) delete ctx.worldData.particlesPositionsRenderTargetSrc;\n\t\tif(ctx.worldData.particlesPositionsRenderTargetDst!==undefined) delete ctx.worldData.particlesPositionsRenderTargetDst;\n\t\tif(ctx.worldData.particlesPositionsTexture!==undefined) delete ctx.worldData.particlesPositionsTexture;\n\t\tif(ctx.worldData.particlesVertexMaterial!==undefined) delete ctx.worldData.particlesVertexMaterial;\n\t\tif(ctx.worldData.particlesSize!==undefined) delete ctx.worldData.particlesSize;\n\t\t\n\t\t\n\n\t\t\n\n\t}\n\tcatch(err)\n\t{\n\t\tconsole.log(\"Init-cleanupParticulesObjects : \" + err);\n\t}\n};\n\n}\n\n\n//Chladni Patterns Setup \n{\n\nvar setupChladniObjects = function(args, ctx, goo) {\n\ttry\n\t{\n//console.log(goo);\n\t\t//goo.renderer.rendererRecord.shaderCache = {};\n\t\tctx.worldData.chladniM = 0;\n\t\tctx.worldData.chladniN = 0;\n\n\t\tvar textureSettings = {\n\t\t\ttype: 'Float',\n\t\t\tminFilter: 'NearestNeighborNoMipMaps',\n\t\t\tmagFilter: 'NearestNeighbor',\n\t\t};\n\t\n\t\tctx.worldData.chladniDim = 256.0;\n\t\tctx.worldData.chladniTarget = new goo.RenderTarget(ctx.worldData.chladniDim, ctx.worldData.chladniDim, textureSettings);\n\t//\tctx.worldData.chladniTarget2 = new goo.RenderTarget(ctx.worldData.chladniDim, ctx.worldData.chladniDim, textureSettings);\n\t\t\n\t\t//ctx.worldData.chladniTargetCurrent = ctx.worldData.chladniTarget1;\n\t\t\n\t\tvar chladniRawImg = new Float32Array(4 * ctx.worldData.chladniDim * ctx.worldData.chladniDim);\n\t\t\n\t\tfor (var i = 0; i < ctx.worldData.chladniDim*ctx.worldData.chladniDim; i++){\n\t\t\t// velocity\n\t\t\tchladniRawImg[i * 4 + 0] = 0.0;\n\t\t\tchladniRawImg[i * 4 + 1] = 1.0;\n\t\t\tchladniRawImg[i * 4 + 2] = 1.0;\n\t\t\t// mass\n\t\t\tchladniRawImg[i * 4 + 3] = 0.0;\n\t\t}\n\n\t\tctx.worldData.chladniTexture = new goo.Texture(chladniRawImg, textureSettings, ctx.worldData.chladniDim, ctx.worldData.chladniDim);\n\t\tctx.worldData.chladniTexture.generateMipmaps = false;\n\n\t\tctx.worldData.renderableObject = {\n\t\t\tmeshData: goo.FullscreenUtil.quad,\n\t\t\tmaterials: [],\n\t\t\ttransform: new goo.Transform(),\n\t\t\tshaderCache: {}\n\t\t};\n\n\t\tctx.worldData.chladniMaterial = new goo.Material('ChladniMaterial', {\n\t\t\tattributes: {\n\t\t\t\tvertexPosition: goo.MeshData.POSITION,\n\t\t\t\tvertexUV0: goo.MeshData.TEXCOORD0\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\tviewProjectionMatrix: goo.Shader.VIEW_PROJECTION_MATRIX,\n\t\t\t\tworldMatrix: goo.Shader.WORLD_MATRIX,\n\t\t\t\tu_n : function() {return ctx.worldData.chladniN;},\n\t\t\t\tu_m : function() {return ctx.worldData.chladniM;},\n\t\t\t},\n\t\t\tvshader : goo.ShaderLib.copy.vshader,\n\t\t\tfshader : [\n\t\t\t\t'uniform float u_n;',\n\t\t\t\t'uniform float u_m;',\n\t\t\t\t\n\t\t\t\t'varying vec2 texCoord0;',\n\t\t\t\t'varying vec2 texDim0;',\n\t\t\t\t\n\t\t\t\t'#define PI 3.1415926535897932384626433832795',\n\t\t\t\t\n\t\t\t\t'void main() {',\n\t\t\t\t\n\t\t\t\t'float x = (texCoord0.x);',\n\t\t\t\t'float y = (texCoord0.y);',\n\t\t\t\t'if(u_n < 0.0 || u_m < 0.0)',\n\t\t\t\t'{',\n\t\t\t\t\t'x = 1.0-(texCoord0.y);',\n\t\t\t\t\t'y = (texCoord0.x);',\n\t\t\t\t//\t'u_n = -u_n;',\n\t\t\t\t//\t'u_m = -u_m;',\n\t\t\t\t'}',\n\n\t\t\t\t'float rout = cos(u_n * PI * x)*cos(u_m * PI * y);',\n\t\t\t\t'rout -= cos(u_m * PI * x)*cos(u_n * PI * y);',\n\t\t\t\t'if(rout < 0.0)',\n\t\t\t\t'rout = -rout;',\n\t\t\t\t'if(rout > 1.0)',\n\t\t\t\t'rout = 1.0;',\n\n\t\t\t\t\n\t\t\t\t'vec4 mapped = vec4 (rout,rout,rout,1.0);',\n\n\t\t\t\t// output texture\n\t\t\t\t'gl_FragColor = mapped;',\n\t\t\t'}'].join('\\n')\n\t\t});\n\n\t}\n\tcatch(err)\n\t{\n\t\tconsole.log(\"Init-setupChladniObjects : \" + err);\n\t}\n};\n\nvar cleanupChladniObjects = function(ctx) {\n\ttry\n\t{\n\t\tif(ctx.worldData.chladniDim!==undefined) delete ctx.worldData.chladniDim;\n\t\tif(ctx.worldData.chladniTarget!==undefined) delete ctx.worldData.chladniTarget;\n\t\t//if(ctx.worldData.chladniTargetCurrent!==undefined) delete ctx.worldData.chladniTargetCurrent;\n\t\t\n\t\tif(ctx.worldData.chladniTexture!==undefined) delete ctx.worldData.chladniTexture;\n\t\tif(ctx.worldData.renderableObject!==undefined) delete ctx.worldData.renderableObject;\n\t\tif(ctx.worldData.chladniMaterial!==undefined) delete ctx.worldData.chladniMaterial;\n\t}\n\tcatch(err)\n\t{\n\t\tconsole.log(\"Init-cleanupChladniObjects : \" + err);\n\t}\n};\n\n}\n\n//CleanUp\n{\nvar cleanup = function(args, ctx, goo) {\n\ttry\n\t{\n\t\tcleanupChladniObjects(ctx);\n\t\tcleanupParticulesObjects(ctx);\n\n\t\tif(ctx.worldData.preRender!==undefined)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tctx.world.gooRunner.callbacksPreRender.pop(ctx.worldData.preRender);\n\t\t\t}\n\t\t\tcatch(err)\n\t\t\t{\n\t\t\t\tconsole.log(\"Init-cleanup  Remove PreRender: \" + err);\n\t\t\t}\n\t\t\tdelete ctx.worldData.preRender;\n\t\t\t//console.log(\"success\");\n\t\t}\n\t\t\n\t\tif(ctx.worldData.preRenderProcessCount!==undefined) delete ctx.worldData.preRenderProcessCount;\n\t\tif(ctx.worldData.preRenderRandom!==undefined) delete ctx.worldData.preRenderRandom;\n\t\t\n\t\t// n = ctx.world.createEntity( md, material).addToWorld();\n\t\t//n.removeFromWorld(); // HERE !!!\n\t}\n\tcatch(err)\n\t{\n\t\tconsole.log(\"Init-cleanup : \" + err);\n\t}\n};\n}\n\n//Update\n{\nvar update = function(args, ctx, goo) {\n\n};\n}\n\nvar parameters = [];", "name": "Chladni Script", "license": "CC0", "created": "2014-11-07T15:45:31.394819+00:00", "deleted": false, "dataModelVersion": 2, "modified": "2014-11-12T21:01:21.128679+00:00", "dependencies": {}, "id": "8444d9d3cf2b4780a68cabcea7523891.script"}, "2bdd832d981e4bb3946b6163128ec662.entity": {"name": "Light", "license": "CC0", "tags": {}, "deleted": false, "created": "2014-11-07T15:45:33.464638+00:00", "modified": "2015-03-09T09:05:23.113371+00:00", "dataModelVersion": 2, "static": false, "components": {"light": {"direction": [0, 0, 0], "shadowCaster": false, "color": [1, 1, 1, 1], "intensity": 1.01, "range": 88.07, "specularIntensity": 0.83, "penumbra": 5, "angle": 30, "type": "PointLight", "shadowSettings": {"fov": 30, "darkness": 1, "far": 88.07, "near": 1, "resolution": [256, 256], "shadowType": "Basic", "size": 100}}, "transform": {"translation": [2.7013282775878906, 29.96934700012207, -11.132110595703125], "scale": [1, 1, 1], "rotation": [0, 0, 0]}}, "hidden": false, "id": "2bdd832d981e4bb3946b6163128ec662.entity"}, "5a899b4f51404fff9343bf8dfbc273cd.entity": {"name": "Plate", "license": "CC0", "tags": {}, "deleted": false, "created": "2014-11-07T15:45:32.839943+00:00", "dataModelVersion": 2, "modified": "2014-11-19T11:14:56.587781+00:00", "static": false, "components": {"transform": {"rotation": [-90, -90, 0], "scale": [20, 20, 1], "translation": [0, -0.1, 0], "children": {}}, "meshRenderer": {"receiveShadows": false, "materials": {"4391a1ed94b341088d9aeb2ac3572008.material": {"materialRef": "4391a1ed94b341088d9aeb2ac3572008.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": false}, "meshData": {"shape": "Quad"}}, "hidden": false, "id": "5a899b4f51404fff9343bf8dfbc273cd.entity"}, "aa76a1ba497b4b6b855acb12511aa5e8.entity": {"name": "Mic", "license": "CC0", "tags": {}, "deleted": false, "created": "2014-11-07T15:45:29.695246+00:00", "dataModelVersion": 2, "modified": "2015-03-04T14:27:03.407289+00:00", "static": false, "components": {"transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 0]}, "script": {"scripts": {"8cdd5de6b3d545e6b9bb5f18f78a587d.scriptInstance": {"options": {"enabled": true}, "scriptRef": "5b2ad5d000da4e5d8e5d0f82c64c1d32.script", "sortValue": 0, "name": "Custom script"}}}}, "hidden": false, "id": "aa76a1ba497b4b6b855acb12511aa5e8.entity"}, "081f461c31154d79bc5bc55d17178a00.material": {"texturesMapping": {}, "flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [0.1, 0.1, 0.1, 1]}, "materialSpecular": {"enabled": true, "value": [0.9875, 0.9875, 0.9875, 1]}, "fresnel": {"enabled": true, "value": 0}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialSpecularPower": {"enabled": true, "value": 64}, "materialDiffuse": {"enabled": true, "value": [0.8, 0.8, 0.8, 1]}, "reflectivity": {"enabled": true, "value": 0}, "materialEmissive": {"enabled": true, "value": [0.33333333333333337, 0.33333333333333337, 0.33333333333333337, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 0, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "Material", "license": "CC0", "created": "2014-11-07T15:45:33.759803+00:00", "deleted": false, "wireframe": false, "dataModelVersion": 2, "blendState": {"blendEquation": "AddEquation", "blendSrc": "SrcAlphaFactor", "blendDst": "OneMinusSrcAlphaFactor", "blending": "NoBlending"}, "modified": "2014-11-07T15:45:33.759834+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "id": "081f461c31154d79bc5bc55d17178a00.material", "renderQueue": -1}, "8d4b55c9194d4583af40daf0b1525403.material": {"texturesMapping": {}, "flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": true, "value": 0}, "materialAmbient": {"enabled": true, "value": [0.1, 0.1, 0.1, 1]}, "materialSpecular": {"enabled": true, "value": [0.6, 0.6, 0.6, 1]}, "fresnel": {"enabled": true, "value": 0}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialSpecularPower": {"enabled": true, "value": 64}, "materialDiffuse": {"enabled": true, "value": [0.8, 0.8, 0.8, 1]}, "reflectivity": {"enabled": true, "value": 0}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "Material 5", "license": "CC0", "created": "2014-11-07T15:45:31.100541+00:00", "deleted": false, "wireframe": false, "dataModelVersion": 2, "blendState": {"blendEquation": "AddEquation", "blendSrc": "SrcAlphaFactor", "blendDst": "OneMinusSrcAlphaFactor", "blending": "NoBlending"}, "modified": "2014-11-07T15:45:31.100573+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "id": "8d4b55c9194d4583af40daf0b1525403.material", "renderQueue": -1}, "cb8982760ae24f23add2f3fcd6146b14.scene": {"canvas": {"resolution": {"width": 1920, "height": 1080}, "mode": "Stretch"}, "initialCameraRef": "15adc08dc8cb4d599b8cdb547331c1c6.entity", "description": "Shader Training.\nDev : Sylvain @ www.octarina.com", "license": "CC0", "created": "2015-09-29T19:43:52.120754+00:00", "deleted": false, "thumbnailRef": "98c46591373212730100f3c5a0970e054c66c4d3.jpg", "environmentRef": "bc6acfc9d94f4fd682746f26b3135fb6.environment", "dataModelVersion": 2, "modified": "2015-09-29T19:43:52.120754+00:00", "entities": {"15adc08dc8cb4d599b8cdb547331c1c6.entity": {"entityRef": "15adc08dc8cb4d599b8cdb547331c1c6.entity", "sortValue": 27}, "cfc3fcb8a30343849ad65bd6318e0f7e.entity": {"entityRef": "cfc3fcb8a30343849ad65bd6318e0f7e.entity", "sortValue": 21}, "975394ad48e3466b904852842e74114e.entity": {"entityRef": "975394ad48e3466b904852842e74114e.entity", "sortValue": 22}, "576e29d2b3c14f62ad9a596f407c6216.entity": {"entityRef": "576e29d2b3c14f62ad9a596f407c6216.entity", "sortValue": 20}, "3f9222749ddf4f5dabeb62945de21645.entity": {"entityRef": "3f9222749ddf4f5dabeb62945de21645.entity", "sortValue": 5}, "109caf195a5644baa365bf74129c234c.entity": {"entityRef": "109caf195a5644baa365bf74129c234c.entity", "sortValue": 23}, "350977b92fe84152bfb26d4a73273e1b.entity": {"entityRef": "350977b92fe84152bfb26d4a73273e1b.entity", "sortValue": 26}, "2bdd832d981e4bb3946b6163128ec662.entity": {"entityRef": "2bdd832d981e4bb3946b6163128ec662.entity", "sortValue": 10}, "8610fcbd02644620b93f7a1985b05605.entity": {"entityRef": "8610fcbd02644620b93f7a1985b05605.entity", "sortValue": 12}, "b6f280f628d64a6fb7539002597632e1.entity": {"entityRef": "b6f280f628d64a6fb7539002597632e1.entity", "sortValue": 4}, "aa76a1ba497b4b6b855acb12511aa5e8.entity": {"entityRef": "aa76a1ba497b4b6b855acb12511aa5e8.entity", "sortValue": 18}, "5a899b4f51404fff9343bf8dfbc273cd.entity": {"entityRef": "5a899b4f51404fff9343bf8dfbc273cd.entity", "sortValue": 9}}, "posteffectsRef": "55bfcc6936e5481b924d90effef75e58.posteffects", "packs": {"c98bb2fada9648e39e8ba3b7b46a595a.pack": {"packRef": "c98bb2fada9648e39e8ba3b7b46a595a.pack", "sortValue": 0}}, "defaultPackRef": "c98bb2fada9648e39e8ba3b7b46a595a.pack", "publishedUrls": {"https://c1.goote.ch/df8c2648e83b9c3368be054fd00366c0f19d46d3": "2015-09-29T22:21:09.682905+00:00", "https://c1.goote.ch/48563eba637bc57552189e43b7eca295ec4c5dd3": "2015-09-29T20:21:22.198751+00:00", "https://c1.goote.ch/29c51bbb25704445c8f3aff458e3a618c131b3df": "2015-09-29T23:16:38.395102+00:00", "https://c1.goote.ch/f848f0499f083afe03e387ab6b4195ded8017600": "2015-09-29T22:22:24.007850+00:00", "https://c1.goote.ch/9bf0b0b4f81ebb68cba7e219b40a1f9f09b23d7c": "2015-09-29T22:25:28.745885+00:00", "https://c1.goote.ch/980dff4144339179582e424557f7371249fc9f12": "2015-09-29T20:23:55.435245+00:00", "https://c1.goote.ch/039a76ab2458bac527496bf2bbc113b24dcc56b1": "2015-09-29T22:22:18.729959+00:00", "https://c1.goote.ch/47c97a67d181baa5aae3882ffecee60a9bcd6292": "2015-09-29T22:33:16.927146+00:00"}, "id": "cb8982760ae24f23add2f3fcd6146b14.scene", "tags": {"particles": "particles", "microphone": "microphone", "chladni": "chladni", "shader": "shader"}, "name": "The Chladni Experiment"}, "5e9c1dfb775c4097958b09a712060b3e.material": {"texturesMapping": {"DIFFUSE_MAP": {"enabled": true, "textureRef": "4c73b8da7a1b4428b0e7875e192a8114.texture"}}, "flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": true, "value": 0}, "materialAmbient": {"enabled": true, "value": [0.1, 0.1, 0.1, 1]}, "materialSpecular": {"enabled": true, "value": [0, 0, 0, 1]}, "fresnel": {"enabled": true, "value": 0}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialSpecularPower": {"enabled": false, "value": 0}, "materialDiffuse": {"enabled": true, "value": [1, 1, 1, 1]}, "reflectivity": {"enabled": true, "value": 0}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "Rect 3 Material", "license": "CC0", "created": "2014-11-07T15:45:32.469963+00:00", "deleted": false, "wireframe": false, "dataModelVersion": 2, "blendState": {"blendEquation": "AddEquation", "blendSrc": "SrcAlphaFactor", "blendDst": "OneMinusSrcAlphaFactor", "blending": "CustomBlending"}, "modified": "2014-11-07T15:45:32.469995+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "id": "5e9c1dfb775c4097958b09a712060b3e.material", "renderQueue": -1}, "cfc3fcb8a30343849ad65bd6318e0f7e.entity": {"name": "Html Infos", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-09-29T20:19:54.841Z", "dataModelVersion": 2, "modified": "2015-09-29T20:19:54.841Z", "static": false, "components": {"html": {"imageRefs": {}, "useTransformComponent": false, "innerHtml": "<style>\n\t\t\t*{ box-sizing: border-box; margin: 0; padding: 0 }\n\t\t\tbody {\n\t\t\t\tcolor: #eee;\n\t\t\t\tfont-family: tahoma;\n\t\t\t\tfont-size:13px;\n\t\t\t\tmargin: 0px;\n\t\t\t\toverflow: hidden;\n\t\t\t\tline-height: 1.4em;\n\t\t\t\ttext-shadow: 0 -1px 0 rgba( 0, 0, 0, .5 );\n\t\t\t\tbackground-color: #000;\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 100%;\n-moz-user-select: none; \n        -khtml-user-select: none; \n        -webkit-user-select: none; \n        -o-user-select: none; \t\t\t}\n\t\t\tp1{ color: #50Df4f; font-size:23px; }\n\t\t\ta{ color: gray; text-shadow: 0 1px 0 rgba( 0,0,0,.5 ) }\n\n\t\n\t}\n\t\t</style>\n\n<div id=\"title\" class=\"ui\">\n\t\t\t<p1>Make some noise in your microphone ! (shout or whistle)</p1>\n\t\t\t<p>></p>\n\t\n\t\t\t<a href=\"https://en.wikipedia.org/wiki/Ernst_Chladni\" target=\"_blank\" >The Chladni Experiment</a> / <a href=\"https://www.google.com/search?q=chladni+patterns&newwindow=1&safe=off&hl=en&source=lnms&tbm=isch&sa=X&ved=0CAkQ_AUoA2oVChMItPKCxoydyAIVR1gaCh0VVw5G&biw=1516&bih=937&dpr=0.9\" target=\"_blank\" >Patterns</a> / <a href=\"https://www.google.com/search?q=chladni+patterns&newwindow=1&safe=off&hl=en&biw=1516&bih=937&tbm=vid&source=lnms&sa=X&ved=0CAgQ_AUoAmoVChMI4N6WyIydyAIVSLYaCh3zTQy1&dpr=0.9\" target=\"_blank\" >Real life</a> \n\t\t\t<p>></p>\n\t\t\t<p>Dev : Sylvain @ <a href=\"http://www.octarina.com/?page_id=36\" target=\"_blank\" >www.octarina.com</a>\n\t\t\t<p>></p>\n\t\t\t<p>Commercial projects released by Octarina.com (powered by Goo) :</p>\n\n\t<p><a href=\"http://www.idtgv.com/idtgv-en-3d\" target=\"_blank\" >iDTGV (french high-speed rail) - July 2015</a></p>\n\t<p><a href=\"https://c1.goote.ch/eabb88ffba688161896345c4ab4f98d3b84aa901/\" target=\"_blank\" >Monologue (3D printed shoes online shop) - April 2014</a></p>\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t</div>\n"}, "transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 0]}}, "hidden": false, "id": "cfc3fcb8a30343849ad65bd6318e0f7e.entity"}, "576e29d2b3c14f62ad9a596f407c6216.entity": {"name": "PreRenderChladniQuadEntity", "license": "CC0", "tags": {}, "deleted": false, "created": "2014-11-07T15:45:33.665169+00:00", "dataModelVersion": 2, "modified": "2015-03-09T09:05:23.078785+00:00", "static": false, "components": {"transform": {"rotation": [0, 0, 0], "scale": [10, 10, 1], "translation": [0, 2.5586423873901367, -18.997676849365234]}, "meshRenderer": {"receiveShadows": true, "materials": {"8d4b55c9194d4583af40daf0b1525403.material": {"materialRef": "8d4b55c9194d4583af40daf0b1525403.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "meshData": {"shape": "Quad"}}, "hidden": false, "id": "576e29d2b3c14f62ad9a596f407c6216.entity"}, "bc6acfc9d94f4fd682746f26b3135fb6.environment": {"sound": {"volume": 1, "dopplerFactor": 0, "reverb": 0, "rolloffFactor": 0.4, "maxDistance": 100}, "globalAmbient": [0, 0, 0, 0], "license": "CC0", "created": "2014-11-07T15:45:30.030265+00:00", "deleted": false, "dataModelVersion": 2, "modified": "2014-11-12T14:27:53.712787+00:00", "weather": {"snow": {"velocity": 10, "rate": 10, "enabled": false, "height": 25}}, "fog": {"color": [1, 1, 1], "far": 996, "near": 0, "enabled": false}, "backgroundColor": [0, 0, 0, 1], "id": "bc6acfc9d94f4fd682746f26b3135fb6.environment", "name": "Default Environment"}, "4391a1ed94b341088d9aeb2ac3572008.material": {"texturesMapping": {}, "flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [0, 0, 0, 1]}, "materialSpecular": {"enabled": true, "value": [0.6, 0.6, 0.6, 1]}, "fresnel": {"enabled": true, "value": 0}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialSpecularPower": {"enabled": true, "value": 15.18}, "materialDiffuse": {"enabled": true, "value": [0.19607843137254902, 0.29411764705882354, 0.6901960784313725, 1]}, "reflectivity": {"enabled": true, "value": 0}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": false, "value": 0}, "normalMultiplier": {"enabled": true, "value": 0.04}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 0, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "Material 3", "license": "CC0", "created": "2014-11-07T15:45:30.693359+00:00", "deleted": false, "wireframe": false, "dataModelVersion": 2, "blendState": {"blendEquation": "AddEquation", "blendSrc": "SrcAlphaFactor", "blendDst": "OneMinusSrcAlphaFactor", "blending": "CustomBlending"}, "modified": "2014-11-13T15:30:20.442034+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "id": "4391a1ed94b341088d9aeb2ac3572008.material", "renderQueue": -1}, "3f9222749ddf4f5dabeb62945de21645.entity": {"name": "PreRenderChladniEntity", "license": "CC0", "tags": {}, "deleted": false, "created": "2014-11-07T15:45:29.437278+00:00", "dataModelVersion": 2, "modified": "2015-03-04T15:12:24.476387+00:00", "static": false, "components": {"quad": {"materialRef": "5e9c1dfb775c4097958b09a712060b3e.material"}, "transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 4.346668243408203, -19.94466781616211]}}, "hidden": true, "id": "3f9222749ddf4f5dabeb62945de21645.entity"}, "109caf195a5644baa365bf74129c234c.entity": {"name": "Screw", "license": "CC0", "tags": {}, "deleted": false, "created": "2014-11-07T15:45:33.363543+00:00", "dataModelVersion": 2, "modified": "2014-11-19T11:06:51.084160+00:00", "static": false, "components": {"transform": {"rotation": [6.830189170012751e-06, -4.37601048270162e-06, -5.008956130975331e-06], "scale": [0.5, 0.5, 0.5], "translation": [-4.706203782234297e-08, -0.17026686668395996, -3.815063109868788e-08]}, "meshRenderer": {"receiveShadows": true, "materials": {"081f461c31154d79bc5bc55d17178a00.material": {"materialRef": "081f461c31154d79bc5bc55d17178a00.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "meshData": {"shape": "Sphere", "shapeOptions": {"radialSamples": 16, "textureMode": "Projected", "radius": 1, "zSamples": 16}}}, "hidden": false, "id": "109caf195a5644baa365bf74129c234c.entity"}, "8610fcbd02644620b93f7a1985b05605.entity": {"name": "Light 2", "license": "CC0", "tags": {}, "deleted": false, "created": "2014-11-07T15:45:30.241324+00:00", "modified": "2015-03-09T09:05:23.063474+00:00", "dataModelVersion": 2, "static": false, "components": {"light": {"direction": [0, 0, 0], "shadowCaster": false, "color": [1, 1, 1, 1], "intensity": 1, "range": 60, "specularIntensity": 1, "penumbra": 5, "angle": 30, "type": "PointLight", "shadowSettings": {"fov": 55, "darkness": 1, "far": 60, "near": 1, "resolution": [256, 256], "shadowType": "Basic", "size": 100}}, "transform": {"translation": [0, -7.341536521911621, 3.2448997497558594], "scale": [1, 1, 1], "rotation": [0, 0, 0]}}, "hidden": false, "id": "8610fcbd02644620b93f7a1985b05605.entity"}, "b6f280f628d64a6fb7539002597632e1.entity": {"name": "Setup", "license": "CC0", "tags": {}, "deleted": false, "created": "2014-11-07T15:45:30.483609+00:00", "dataModelVersion": 2, "modified": "2014-11-19T09:08:42.654901+00:00", "static": false, "components": {"transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0.7970991134643555, 4.842503547668457, 0]}, "script": {"scripts": {"da575e09372b4a5f89494fe4b1c772d8.scriptInstance": {"options": {"enabled": true}, "scriptRef": "8444d9d3cf2b4780a68cabcea7523891.script", "sortValue": 0, "name": "Custom script"}}}}, "hidden": false, "id": "b6f280f628d64a6fb7539002597632e1.entity"}, "3353913b5303456893dd16c10d7af32a.material": {"texturesMapping": {}, "flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [0.1, 0.1, 0.1, 1]}, "materialSpecular": {"enabled": true, "value": [0.6, 0.6, 0.6, 1]}, "fresnel": {"enabled": true, "value": 0}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialSpecularPower": {"enabled": true, "value": 64}, "materialDiffuse": {"enabled": true, "value": [0.8, 0.8, 0.8, 1]}, "reflectivity": {"enabled": true, "value": 0}, "materialEmissive": {"enabled": true, "value": [0.06666666666666665, 0.06666666666666665, 0.06666666666666665, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 0, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "Material 2", "license": "CC0", "created": "2014-11-07T15:45:30.339975+00:00", "deleted": false, "wireframe": false, "dataModelVersion": 2, "blendState": {"blendEquation": "AddEquation", "blendSrc": "SrcAlphaFactor", "blendDst": "OneMinusSrcAlphaFactor", "blending": "NoBlending"}, "modified": "2014-11-07T15:45:30.340010+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "id": "3353913b5303456893dd16c10d7af32a.material", "renderQueue": -1}, "350977b92fe84152bfb26d4a73273e1b.entity": {"name": "Fixed Cam", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-09-29T20:29:04.532Z", "dataModelVersion": 2, "modified": "2015-09-29T20:29:04.532Z", "static": false, "components": {"camera": {"fov": 45, "lockedRatio": false, "far": 1000, "followEditorCam": true, "projectionMode": "Perspective", "near": 1, "aspect": 1, "size": 100}, "transform": {"rotation": [-33.518019540435354, -202.43621588025343, 0], "scale": [1, 1, 1], "translation": [9.875117301940918, 19.395248413085938, -24.966947555541992]}}, "hidden": false, "id": "350977b92fe84152bfb26d4a73273e1b.entity"}}